/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DataSetsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cidExists"
      | "getCidsByOwner"
      | "getMetadataByCid"
      | "getOwnerOfCid"
      | "storeMetadata"
      | "updateMetadata"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MetadataStored" | "MetadataUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "cidExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCidsByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataByCid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerOfCid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "storeMetadata",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [string, string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "cidExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCidsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataByCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerOfCid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
}

export namespace MetadataStoredEvent {
  export type InputTuple = [
    cid: string,
    owner: AddressLike,
    name: string,
    domain: string,
    license: string,
    access: string
  ];
  export type OutputTuple = [
    cid: string,
    owner: string,
    name: string,
    domain: string,
    license: string,
    access: string
  ];
  export interface OutputObject {
    cid: string;
    owner: string;
    name: string;
    domain: string;
    license: string;
    access: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [
    cid: string,
    updater: AddressLike,
    name: string,
    domain: string,
    license: string,
    access: string
  ];
  export type OutputTuple = [
    cid: string,
    updater: string,
    name: string,
    domain: string,
    license: string,
    access: string
  ];
  export interface OutputObject {
    cid: string;
    updater: string;
    name: string;
    domain: string;
    license: string;
    access: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataSets extends BaseContract {
  connect(runner?: ContractRunner | null): DataSets;
  waitForDeployment(): Promise<this>;

  interface: DataSetsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cidExists: TypedContractMethod<[cid: string], [boolean], "view">;

  getCidsByOwner: TypedContractMethod<[owner: AddressLike], [string[]], "view">;

  getMetadataByCid: TypedContractMethod<
    [cid: string],
    [[string, string, string, string, string, string]],
    "view"
  >;

  getOwnerOfCid: TypedContractMethod<[cid: string], [string], "view">;

  storeMetadata: TypedContractMethod<
    [
      cid: string,
      name: string,
      domain: string,
      license: string,
      access: string
    ],
    [void],
    "nonpayable"
  >;

  updateMetadata: TypedContractMethod<
    [
      cid: string,
      name: string,
      domain: string,
      license: string,
      access: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cidExists"
  ): TypedContractMethod<[cid: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCidsByOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMetadataByCid"
  ): TypedContractMethod<
    [cid: string],
    [[string, string, string, string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwnerOfCid"
  ): TypedContractMethod<[cid: string], [string], "view">;
  getFunction(
    nameOrSignature: "storeMetadata"
  ): TypedContractMethod<
    [
      cid: string,
      name: string,
      domain: string,
      license: string,
      access: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMetadata"
  ): TypedContractMethod<
    [
      cid: string,
      name: string,
      domain: string,
      license: string,
      access: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MetadataStored"
  ): TypedContractEvent<
    MetadataStoredEvent.InputTuple,
    MetadataStoredEvent.OutputTuple,
    MetadataStoredEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;

  filters: {
    "MetadataStored(string,address,string,string,string,string)": TypedContractEvent<
      MetadataStoredEvent.InputTuple,
      MetadataStoredEvent.OutputTuple,
      MetadataStoredEvent.OutputObject
    >;
    MetadataStored: TypedContractEvent<
      MetadataStoredEvent.InputTuple,
      MetadataStoredEvent.OutputTuple,
      MetadataStoredEvent.OutputObject
    >;

    "MetadataUpdated(string,address,string,string,string,string)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
  };
}
