/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DataSet {
  export type MetadataStruct = {
    cid: string;
    name: string;
    fileName: string;
    fileSize: BigNumberish;
    domain: string;
    license: string;
    access: string;
    visibility: string;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type MetadataStructOutput = [
    cid: string,
    name: string,
    fileName: string,
    fileSize: bigint,
    domain: string,
    license: string,
    access: string,
    visibility: string,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    cid: string;
    name: string;
    fileName: string;
    fileSize: bigint;
    domain: string;
    license: string;
    access: string;
    visibility: string;
    createdAt: bigint;
    updatedAt: bigint;
  };
}

export interface DataSetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllMetadata"
      | "getCountByVisibility"
      | "getMetadataByCID"
      | "getMetadataByVisibility"
      | "getTotalDatasetCount"
      | "storeMetadata"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MetadataStored" | "MetadataUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAllMetadata",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountByVisibility",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataByCID",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadataByVisibility",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDatasetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storeMetadata",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      string,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountByVisibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataByCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataByVisibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDatasetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeMetadata",
    data: BytesLike
  ): Result;
}

export namespace MetadataStoredEvent {
  export type InputTuple = [
    cid: string,
    owner: AddressLike,
    name: string,
    fileName: string,
    fileSize: BigNumberish,
    domain: string,
    license: string,
    access: string,
    visibility: string
  ];
  export type OutputTuple = [
    cid: string,
    owner: string,
    name: string,
    fileName: string,
    fileSize: bigint,
    domain: string,
    license: string,
    access: string,
    visibility: string
  ];
  export interface OutputObject {
    cid: string;
    owner: string;
    name: string;
    fileName: string;
    fileSize: bigint;
    domain: string;
    license: string;
    access: string;
    visibility: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [
    cid: string,
    updater: AddressLike,
    name: string,
    fileName: string,
    fileSize: BigNumberish,
    domain: string,
    license: string,
    access: string,
    visibility: string
  ];
  export type OutputTuple = [
    cid: string,
    updater: string,
    name: string,
    fileName: string,
    fileSize: bigint,
    domain: string,
    license: string,
    access: string,
    visibility: string
  ];
  export interface OutputObject {
    cid: string;
    updater: string;
    name: string;
    fileName: string;
    fileSize: bigint;
    domain: string;
    license: string;
    access: string;
    visibility: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataSet extends BaseContract {
  connect(runner?: ContractRunner | null): DataSet;
  waitForDeployment(): Promise<this>;

  interface: DataSetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllMetadata: TypedContractMethod<
    [page: BigNumberish, pageSize: BigNumberish],
    [DataSet.MetadataStructOutput[]],
    "view"
  >;

  getCountByVisibility: TypedContractMethod<
    [visibility: string],
    [bigint],
    "view"
  >;

  getMetadataByCID: TypedContractMethod<
    [cid: string],
    [DataSet.MetadataStructOutput],
    "view"
  >;

  getMetadataByVisibility: TypedContractMethod<
    [visibility: string, page: BigNumberish, pageSize: BigNumberish],
    [DataSet.MetadataStructOutput[]],
    "view"
  >;

  getTotalDatasetCount: TypedContractMethod<[], [bigint], "view">;

  storeMetadata: TypedContractMethod<
    [
      cid: string,
      name: string,
      fileName: string,
      fileSize: BigNumberish,
      domain: string,
      license: string,
      access: string,
      visibility: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllMetadata"
  ): TypedContractMethod<
    [page: BigNumberish, pageSize: BigNumberish],
    [DataSet.MetadataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCountByVisibility"
  ): TypedContractMethod<[visibility: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMetadataByCID"
  ): TypedContractMethod<[cid: string], [DataSet.MetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "getMetadataByVisibility"
  ): TypedContractMethod<
    [visibility: string, page: BigNumberish, pageSize: BigNumberish],
    [DataSet.MetadataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalDatasetCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "storeMetadata"
  ): TypedContractMethod<
    [
      cid: string,
      name: string,
      fileName: string,
      fileSize: BigNumberish,
      domain: string,
      license: string,
      access: string,
      visibility: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MetadataStored"
  ): TypedContractEvent<
    MetadataStoredEvent.InputTuple,
    MetadataStoredEvent.OutputTuple,
    MetadataStoredEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;

  filters: {
    "MetadataStored(string,address,string,string,uint256,string,string,string,string)": TypedContractEvent<
      MetadataStoredEvent.InputTuple,
      MetadataStoredEvent.OutputTuple,
      MetadataStoredEvent.OutputObject
    >;
    MetadataStored: TypedContractEvent<
      MetadataStoredEvent.InputTuple,
      MetadataStoredEvent.OutputTuple,
      MetadataStoredEvent.OutputObject
    >;

    "MetadataUpdated(string,address,string,string,uint256,string,string,string,string)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
  };
}
