/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ObligationManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "arbiter"
      | "createObligation"
      | "getObligationByCID"
      | "obligations"
      | "owner"
      | "setSLARequirements"
      | "slaRequirements"
      | "updateStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ObligationCreated" | "ObligationUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "arbiter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createObligation",
    values: [string, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getObligationByCID",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "obligations", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSLARequirements",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slaRequirements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStatus",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "arbiter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createObligation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getObligationByCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "obligations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSLARequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slaRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStatus",
    data: BytesLike
  ): Result;
}

export namespace ObligationCreatedEvent {
  export type InputTuple = [
    cid: string,
    provider: AddressLike,
    duration: BigNumberish,
    redundancy: BigNumberish,
    retrievalSpeed: BigNumberish
  ];
  export type OutputTuple = [
    cid: string,
    provider: string,
    duration: bigint,
    redundancy: bigint,
    retrievalSpeed: bigint
  ];
  export interface OutputObject {
    cid: string;
    provider: string;
    duration: bigint;
    redundancy: bigint;
    retrievalSpeed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ObligationUpdatedEvent {
  export type InputTuple = [cid: string, status: BigNumberish];
  export type OutputTuple = [cid: string, status: bigint];
  export interface OutputObject {
    cid: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ObligationManager extends BaseContract {
  connect(runner?: ContractRunner | null): ObligationManager;
  waitForDeployment(): Promise<this>;

  interface: ObligationManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  arbiter: TypedContractMethod<[], [string], "view">;

  createObligation: TypedContractMethod<
    [
      cid: string,
      provider: AddressLike,
      duration: BigNumberish,
      redundancy: BigNumberish,
      retrievalSpeed: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getObligationByCID: TypedContractMethod<
    [cid: string],
    [[string, string, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  obligations: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        cid: string;
        provider: string;
        startTime: bigint;
        duration: bigint;
        redundancy: bigint;
        retrievalSpeed: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setSLARequirements: TypedContractMethod<
    [
      minDuration: BigNumberish,
      maxDuration: BigNumberish,
      minRedundancy: BigNumberish,
      maxRetrievalSpeed: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  slaRequirements: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        minDuration: bigint;
        maxDuration: bigint;
        minRedundancy: bigint;
        maxRetrievalSpeed: bigint;
      }
    ],
    "view"
  >;

  updateStatus: TypedContractMethod<
    [cid: string, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "arbiter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createObligation"
  ): TypedContractMethod<
    [
      cid: string,
      provider: AddressLike,
      duration: BigNumberish,
      redundancy: BigNumberish,
      retrievalSpeed: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getObligationByCID"
  ): TypedContractMethod<
    [cid: string],
    [[string, string, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "obligations"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        cid: string;
        provider: string;
        startTime: bigint;
        duration: bigint;
        redundancy: bigint;
        retrievalSpeed: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setSLARequirements"
  ): TypedContractMethod<
    [
      minDuration: BigNumberish,
      maxDuration: BigNumberish,
      minRedundancy: BigNumberish,
      maxRetrievalSpeed: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slaRequirements"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        minDuration: bigint;
        maxDuration: bigint;
        minRedundancy: bigint;
        maxRetrievalSpeed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateStatus"
  ): TypedContractMethod<
    [cid: string, newStatus: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ObligationCreated"
  ): TypedContractEvent<
    ObligationCreatedEvent.InputTuple,
    ObligationCreatedEvent.OutputTuple,
    ObligationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ObligationUpdated"
  ): TypedContractEvent<
    ObligationUpdatedEvent.InputTuple,
    ObligationUpdatedEvent.OutputTuple,
    ObligationUpdatedEvent.OutputObject
  >;

  filters: {
    "ObligationCreated(string,address,uint256,uint256,uint256)": TypedContractEvent<
      ObligationCreatedEvent.InputTuple,
      ObligationCreatedEvent.OutputTuple,
      ObligationCreatedEvent.OutputObject
    >;
    ObligationCreated: TypedContractEvent<
      ObligationCreatedEvent.InputTuple,
      ObligationCreatedEvent.OutputTuple,
      ObligationCreatedEvent.OutputObject
    >;

    "ObligationUpdated(string,uint8)": TypedContractEvent<
      ObligationUpdatedEvent.InputTuple,
      ObligationUpdatedEvent.OutputTuple,
      ObligationUpdatedEvent.OutputObject
    >;
    ObligationUpdated: TypedContractEvent<
      ObligationUpdatedEvent.InputTuple,
      ObligationUpdatedEvent.OutputTuple,
      ObligationUpdatedEvent.OutputObject
    >;
  };
}
